server:
  port: 8082
  contextPath: /task-service

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka/

spring:
  zipkin:
    baseUrl: http://localhost:9411/
  sleuth:
    sampler:
      percentage: 1.0

# When enabled=false, traces log to the console. Comment to send to zipkin
sample:
  zipkin:
    enabled: true

# Note that we will use the JWT token to get user data
security:
  oauth2:
    resource:
      jwt:
        keyValue: |
          -----BEGIN PUBLIC KEY-----
          MIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEA5dwPU+/tJ0nOWME4LgMr83VxeJbYCER5iC2eb4yn2E/enZIpRpQspcLRpVLEtHaOreSWhpcIX78x/R+GINSCXPDRILo6rFJL7UwA3M6rbJohJMzpZwN07kzb0vCJY0phqabqqDalzr2ShwfRtgPhRdXmfw6QDlSWIJuABDdNv2BN3B6jbg2Z4ZaGseMgdE4IfBdrZQgRxJobjoXRDcWEDBKNZYPEKfWHa1F4eo90PM6rulSSBl4I+Nlt0kdbQEKEkcD/6HNf3zECmCSM/I0MA+1Ikft/EQhFaQdxpNB2J4gS1+wQWfz1URwar3eI3tgwnrFNnAlcYlqzlqTNLrOGmQIDAQAB
          -----END PUBLIC KEY-----
---
# task-webservice instance when used on Docker
spring:
  profiles: docker
  zipkin:
    baseUrl: http://zipkinserver:9411/

eureka:
# Register our microservices to Eureka using hostnames in a Docker environment will not work, they will all get
# one and the same hostname. Instead we configure them to use its IP address during registration with Eureka.
  instance:
    preferIpAddress: true
  client:
    serviceUrl:
      defaultZone: http://eurekaregistry:8761/eureka/

# Define the port where the API gateway server would be running. This could always be port 8080
# since each docker container has it's own IP
server:
  port: 8080
